/**
 * NGX Subscription Types
 * Tipos para gestionar las suscripciones y programas premium de NGX
 */

// Tipos de suscripción base
export type SubscriptionTier = 'essential' | 'pro' | 'elite';

// Programas premium
export type PremiumProgram = 'prime' | 'longevity';

// Tipo combinado
export type NGXTier = SubscriptionTier | PremiumProgram;

// Estados de suscripción
export type SubscriptionStatus = 'trial' | 'active' | 'cancelled' | 'expired' | 'completed';

// Información de pricing
export const TIER_PRICING: Record<NGXTier, { monthly?: number; total?: number; type: 'subscription' | 'program' }> = {
  essential: { monthly: 79, type: 'subscription' },
  pro: { monthly: 149, type: 'subscription' },
  elite: { monthly: 199, type: 'subscription' },
  prime: { total: 3997, type: 'program' },
  longevity: { total: 3997, type: 'program' }
};

// Límites por tier
export const TIER_LIMITS: Record<SubscriptionTier, { dailyQueries: number; pdfAnalysis?: number; features: string[] }> = {
  essential: {
    dailyQueries: 12,
    features: ['chat_multiagent', 'programs_autogenerated', 'basic_tracking']
  },
  pro: {
    dailyQueries: 24,
    pdfAnalysis: 2,
    features: ['vision_analysis', 'wearables_integration', 'weekly_reports']
  },
  elite: {
    dailyQueries: Infinity,
    features: ['voice_audio', 'micro_videos', 'realtime_adjustments', 'priority_support']
  }
};

// Agentes HIE disponibles
export const HIE_AGENTS = {
  frontend: ['NEXUS', 'BLAZE', 'SAGE', 'NOVA', 'EDGE', 'PULSE', 'FLUX', 'WAVE', 'SPARK'],
  backend: ['GUARDIAN', 'NODE']
} as const;

export type HIEAgent = typeof HIE_AGENTS.frontend[number] | typeof HIE_AGENTS.backend[number];

// Métricas de uso
export interface UsageMetrics {
  dailyQueriesUsed: number;
  dailyQueriesLimit: number;
  pdfAnalysisUsed?: number;
  pdfAnalysisLimit?: number;
  lastQueryTime?: string;
  agentUsage: Record<HIEAgent, number>;
}

// Información de suscripción extendida
export interface SubscriptionInfo {
  tier: NGXTier;
  status: SubscriptionStatus;
  startDate: string;
  endDate?: string;
  trialEndDate?: string;
  nextBillingDate?: string;
  mrr?: number; // Monthly Recurring Revenue
  programWeek?: number; // Para PRIME/LONGEVITY (1-20)
  assignedAgents: HIEAgent[];
  usage: UsageMetrics;
  paymentHistory: PaymentRecord[];
}

// Registro de pagos
export interface PaymentRecord {
  id: string;
  date: string;
  amount: number;
  status: 'paid' | 'pending' | 'failed';
  invoiceUrl?: string;
}

// Sesiones 1:1 para programas premium
export interface CoachingSession {
  id: string;
  programType: PremiumProgram;
  sessionNumber: number; // 1-10
  scheduledDate?: string;
  completedDate?: string;
  duration?: number; // minutos
  notes?: string;
  focusArea?: string;
}

// Bonos de programas premium
export interface PremiumBonus {
  type: 'vip_session' | 'elite_community' | 'biohacking_kit' | 'post_program_support' | 'pioneer_pack';
  value: number;
  delivered: boolean;
  deliveredDate?: string;
}

// Cliente extendido con información de suscripción
export interface NGXContact {
  // Campos existentes del ContactRead
  id: string;
  name: string;
  email?: string;
  phone?: string;
  company?: string;
  position?: string;
  
  // Nuevos campos NGX
  subscription?: SubscriptionInfo;
  coachingSessions?: CoachingSession[];
  premiumBonuses?: PremiumBonus[];
  hieProfile?: {
    archetype: 'PRIME' | 'LONGEVITY';
    biomarcadores?: Record<string, any>;
    wearableIntegration?: {
      type: string;
      lastSync: string;
    };
  };
  
  // Métricas de impacto
  impactMetrics?: {
    energyIncrease?: number; // porcentaje
    productivityGain?: number; // horas/semana
    healthspanProjection?: number; // años
    lastUpdated: string;
  };
  
  // Para identificar oportunidades
  upsellOpportunities?: {
    suggestedTier?: NGXTier;
    reason?: string;
    confidence?: number;
  };
  
  churnRisk?: {
    score: number; // 0-100
    reasons: string[];
    lastEngagement: string;
  };
}

// Métricas del dashboard ejecutivo
export interface ExecutiveDashboardMetrics {
  mrr: {
    total: number;
    byTier: Record<NGXTier, number>;
    growth: number; // porcentaje mes a mes
  };
  customers: {
    total: number;
    byTier: Record<NGXTier, number>;
    inTrial: number;
    churnRisk: number;
  };
  trials: {
    active: number;
    conversionRate: number;
    avgDaysToConvert: number;
  };
  premiumPrograms: {
    active: Record<PremiumProgram, number>;
    completed: Record<PremiumProgram, number>;
    avgCompletionRate: number;
  };
  hieUsage: {
    totalQueries: number;
    byAgent: Record<HIEAgent, number>;
    peakHours: number[];
  };
}

// Alertas operacionales
export interface OperationalAlert {
  id: string;
  type: 'trial_expiring' | 'limit_approaching' | 'renewal_due' | 'session_pending' | 'churn_risk';
  priority: 'high' | 'medium' | 'low';
  contactId: string;
  contactName: string;
  message: string;
  actionRequired?: string;
  dueDate?: string;
  acknowledged: boolean;
}